name: CMake Build

on:
  push:
    branches: *
  pull_request:
    branches: *

env:
  BUILD_TYPE: Debug

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu 22.0.4 GCC",
              os: "ubuntu-22.04",
              cc: "/usr/local/bin/gcc-13",
              cxx: "/usr/local/bin/g++-13",
              format: "/usr/bin/clang-format-14",
              tidy: "/usr/bin/clang-tidy-14",
          }
          - {
              name: "macOS 14 (Sonoma)",
              os: macos-14,
              cc: "/usr/local/bin/gcc-13",
              cxx: "/usr/local/bin/g++-13",
              format: "/usr/local/opt/llvm@14/bin/clang-format",
              tidy: "/usr/local/opt/llvm@14/bin/clang-tidy",
          }

    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install Dependencies (Ubuntu)
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}
        run: sudo bash ./build_support/packages.sh -y

      - name: Install Dependencies (OSX)
        if: runner.os == 'macOS'
        working-directory: ${{github.workspace}}
        run: bash ./build_support/packages.sh -y

      - name: Configure CMake
        run: CC=${{matrix.config.cc}} CXX=${{matrix.config.cxx}} cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Unix Makefiles" -DCMAKE_CXX_COMPILER="/usr/local/bin/g++-13" -DCMAKE_C_COMPILER="/usr/local/bin/gcc-13" -DCMAKE_CXX_STANDARD=17 -DSAMPLES=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Check Format
        working-directory: ${{github.workspace}}/build
        run: make check-format

      - name: Check Lint
        working-directory: ${{github.workspace}}/build
        run: make check-lint

      - name: Check Clang Tidy
        working-directory: ${{github.workspace}}/build
        run: make check-clang-tidy

      - name: Check Tests (Ubuntu)
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}/build
        run: make build-tests && make check-tests

      - name: Check Tests (OSX)
        if: runner.os == 'macOS'
        working-directory: ${{github.workspace}}/build
        # Disable container overflow checks on OSX
        run: make build-tests && make check-tests